%title PowerPC e500 package: user manual
%version 1-draft
%docid r2BkWF

Introduction
-------------

The PowerPC e500 package provides support for a QEMU emulated PowerPC e500 machine.
It provides the following modules:

build
  ~ A build module.
ctxt-switch
  ~ A module that implements context switching.
vectable
  ~ A module that generates an appropriate vector table.
debug
  ~ A module that provides the *low-level debug* interface.
rtos-acamar
  ~ A variant of eChronos that supports context switching between tasks via `yield_to()`.
rtos-gatria
  ~ A variant of eChronos that supports round-robin scheduling, `yield()`, `block()`, `unblock()`, and mutexes.
rtos-kraz
  ~ A variant of eChronos that supports round-robin scheduling, `yield()`, mutexes, and signals.
rtos-acrux
  ~ A variant of eChronos that supports round-robin scheduling, interrupt events, `yield()`, `block()`, `unblock()`, and mutexes.
rtos-kochab (PRELIMINARY)
  ~ A variant of eChronos that supports priority scheduling, mutexes with priority inheritance, semaphores, signals, and interrupts that cause task preemption and trigger the sending of signals.
    This is a preliminary version of kochab that does not yet include support for interrupts and task preemption.

Please note that RTOS variants that provide interrupt events only support their use by *noncritical external* interrupts on PowerPC, and will not enable or disable any other types of interrupts.
Projects that define handlers for debug, critical, or machine check interrupts must enable them as needed, and cannot use the interrupt_event_raise() API or any other RTOS functionality.


`ppce500/build`
==============

The build module supports the *system build* interface.
It assumes the presence of a GNU PowerPC cross-compiler on PATH with toolchain prefix `powerpc-linux-gnu-`.
This toolchain can be obtained via a standard installation of the apt package `gcc-powerpc-linux-gnu`.

The system must also have an assigned linker-script.
It is recommended that the `vectable` module is used to provide a functional linker-script.

`ppce500/debug`
==============

The debug module supports the *low-level debug* interface.
It provides the `ppce500_debug_putc` function.

### `ppce500_debug_putc`

    void ppce500_debug_putc(char c)

This function is not currently implemented, and is only a placeholder stub to assist GDB debugging.
Alternatively, the generic `debug_println` function may be another convenient location to place a breakpoint.
