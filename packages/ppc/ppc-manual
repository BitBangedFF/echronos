%title PowerPC package: user manual
%version 1-draft
%docid r2BkWF

Introduction
-------------

The PowerPC package provides support for a QEMU emulated PowerPC machine.
It provides the following modules:

build
  ~ A build module.
entry
  ~ A module that generates an appropriate linker script.
debug
  ~ A module that provides the *low-level debug* interface.

It also includes modules for example systems:

hello
  ~ A system that does the standard *Hello, world*.
acamar-system
  ~ A system demonstrating context switch between two tasks via `yield_to()`.
gatria-system
  ~ A system demonstrating coordination between two tasks via `yield()`, `unblock()`, and mutexes.
kraz-system
  ~ A system demonstrating coordination between two tasks via `yield()`, mutexes, and signals.
acrux-system
  ~ A system demonstrating coordination between two tasks via `yield()` and mutexes, driven by timer interrupt events.

These systems can be run on qemu-system-ppc, provided with standard apt package installations of qemu, emulating the
e500 core:

    qemu-system-ppc -S -nographic -gdb tcp::1234 -M ppce500 -kernel path/to/system

`ppc/build`
==============

The build module supports the *system build* interface.
It assumes the presence of a GNU PowerPC cross-compiler on PATH with toolchain prefix `powerpc-linux-gnu-`.
This toolchain can be obtained via a standard installation of the apt package `gcc-powerpc-linux-gnu`.

The system must also have an assigned linker-script.
It is recommended that the `entry` module is used to provide a functional linker-script.

`ppc/debug`
==============

The debug module supports the *low-level debug* interface.
It provides the `ppc_debug_putc` function.

### `ppc_debug_putc`

    void ppc_debug_putc(char c)

This function is not currently implemented, and is only a placeholder stub to assist GDB debugging.
Alternatively, the generic `debug_println` function may be another convenient location to place a breakpoint.

To obtain a PowerPC-compatible build of GDB:

    * clone git repository `git://sourceware.org/git/binutils-gdb.git`

    * check out a branch from a stable release tag, e.g. `gdb-7.7.1-release`

    * run `./configure --target=powerpc-linux-gnu`

    * run `make`
