Breakaway Task Review
=======================

Task name: ZbYV9R-ppc-kochab-preempt
Version reviewed: 9a7e0e8e79c20a94acedebabc4038a639d25fffd
Reviewer: stg
Date: 2014-09-22
Conclusion: Rework

Overall comments:


Specific comments
=================

Location: components/acrux/implementation.c:11-13
Comment: Rework
These interrupt related functions are included in the RTOS header file since they are declared in the extern_definitions section.
However, since they are not meant to be used by applications, they should not be visible in the RTOS header file.
Therefore, they should move into the function_definitions section, so they are declared only internally and not in an application-visible file.

[robs: Fixed]

Location: components/acrux/implementation.c:11-13
Comment: Rework
These interrupt related functions have the naming pattern <verb>_<noun>.
This contradicts the standard RTOS naming pattern <noun>_<verb>.
Therefore, these functions should be renamed to, e.g., rtos_internal_interrupts_disable()

[robs: Fixed]

Location: components/acrux/implementation.c:21-23
Comment: Rework
These interrupt related macros have the naming pattern <verb>_<noun>.
This contradicts the standard RTOS naming pattern <noun>_<verb>.
Therefore, these macros should be renamed to, e.g., interrupts_disable()

[robs: Fixed]

Location: components/context-preempt-ppce500/implementation.c:92
Comment: Question/Rework
The function ppce500_context_preempt_first() is declared and defined as global instead of static.
However, it is not apparent why it needs to be global.
To avoid name-space pollution, it would be preferable to make it a static function.
Please change it to static or document why it cannot be static.
In the latter case, it should be prefixed with 'rtos_internal_'.

[robs: Thanks for spotting all these.
This is an artifact from when I was originally had a once-only ``syscall_first'' vector calling it from asm.
I soon realized it was unnecessary, but forgot to make the function static again.]

Location: components/context-preempt-ppce500/implementation.c:98-99
Comment: Question/Rework
The variables preempt_disabled and preempt_pending are declared and defined as volatile uint8_t.
Looking at their use, bool seems a more appropriate type for them.
Please document why these variables need to have the type uint8_t or change it to bool.

[robs: Sorry, an artifact from when these were being touched from asm and we needed to know the read/store width.
I'll make them into bools.]

Location: components/context-preempt-ppce500/implementation.c:98-99
Comment: Question/Rework
The variables preempt_disabled and preempt_pending are declared and defined as volatile uint8_t.
Looking at their use, it does not seem as if they need to be accessible to applications.
Please document why these variables need to be public or change them to static variables.
If they need to remain public, they need to receive the standard RTOS prefix to avoid name-space pollution.

[robs: An artifact of when these were touched from a separate asm file, these can become static now.]

Location: components/context-preempt-ppce500/implementation.c:3
Comment: Question/Rework
It appears to me that the declarations in the header sections do not require stddef.h to be included.
Please remove it unless it is required.

[robs: Fixed]

Location: components/context-preempt-ppce500/implementation.c:62-64
Comment: Question/Rework
These internal functions are declared in the extern_definitions section which makes them publicly visible to applications in the RTOS header file.
However, since they are internal functions, applications should not use them.
Therefore, their declarations should not be visible to applications.
Therefore, they need to be declared in the function_definitions section instead.

[robs: Fixed]

Location: components/context-preempt-ppce500/implementation.c:90
Comment: Rework
The declaration of the context_init() function marks its function arguments as const.
However, by convention, const qualifiers for pass-by-value arguments must only be specified in function definitions, not their declarations.
Therefore, the const qualifiers of the function arguments need to be removed.

[robs: Fixed; and removed from the similar declaration in context-switch-ppce500 too]

Location: components/context-preempt-ppce500/implementation.c:117ff
Comment: Rework
The function definition of ppce500_yield_common() and following functions does not establish full const correctness for its function arguments.
As per convention, const qualifiers need to be added for maximum const correctness of function arguments.

[robs: Fixed]

Location: packages/ppce500/vectable.s:2-3
Comment: Rework
The imported package logging and the variable logger are unused.
Please remove them.

[robs: Fixed; removed from their new location at default-linker.py:2-3]

Location: packages/ppce500/vectable.s and others
Comment: Rework
The code duplication between the vector tables with and without preemption support is striking and less than ideal from a maintenance perspective.
How about making the preemption support a configurable feature that can be controlled via a configuration item?

Location: packages/ppce500/vectable-preempt.s:140 and others
Comment: Rework
The "should_not_be_here" mechanism to put a run-away ISR into an endless loop is inappropriate in my opinion because it does not lead to a more useful system behavior.
I recommend to improve this area.
At the very least, it is unnecessary (I believe) that each vector has its own such loop and they could rather branch to a common label that is shared between all of the vectors.
Another alternative is to simply remove this code entirely because an ISR in a tight loop is about as easy to debug as a run-away ISR.
Another alternative is to call the fatal_error() function because its purpose is to cover exactly such cases.
